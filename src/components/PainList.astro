---
export interface Props {
  title?: string;
  subtitle?: string;
  painPoints?: Array<{
    statistic: string;
    label: string;
    description: string;
    icon: string;
  }>;
}

const {
  title = "Diese Herausforderungen kennen Sie",
  subtitle = "Deutsche Unternehmen verschwenden täglich wertvolle Ressourcen durch manuelle Prozesse",
  painPoints = [
    {
      statistic: "43%",
      label: "Zeitverschwendung",
      description: "Ihrer Arbeitszeit geht für repetitive, manuelle Aufgaben verloren, die automatisiert werden könnten.",
      icon: "clock"
    },
    {
      statistic: "€75.000",
      label: "Jährliche Kosten",
      description: "Kostet Sie ein einziger manueller Prozess durch Ineffizienz und menschliche Fehler pro Jahr.",
      icon: "euro"
    },
    {
      statistic: "67%",
      label: "Fehlerrate",
      description: "Höhere Fehlerquote bei manuellen Dateneingaben im Vergleich zu automatisierten Systemen.",
      icon: "error"
    }
  ]
} = Astro.props;
---

<section id="pain-points" class="py-12 sm:py-16 md:py-20 bg-gray-50">
  <div class="max-w-8xl mx-auto px-3 sm:px-4 md:px-6 lg:px-12 xl:px-16">
    
    <!-- Section Header -->
    <div class="text-center mb-10 sm:mb-12 md:mb-16 animate-slide-up px-4">
      <h2 class="text-2xl sm:text-3xl md:text-4xl font-bold text-gray-900 mb-3 sm:mb-4">
        {title}
      </h2>
      <p class="text-base sm:text-lg md:text-xl text-gray-600 max-w-3xl mx-auto leading-relaxed">
        {subtitle}
      </p>
    </div>

    <!-- Pain Points Grid -->
    <div class="grid grid-cols-1 md:grid-cols-3 gap-3 sm:gap-4 md:gap-6 max-w-5xl mx-auto px-2 sm:px-3 md:px-4">
      {painPoints.map((pain, index) => (
        <div 
          class="group animate-fade-in-up"
          style={`animation-delay: ${(index + 1) * 150}ms`}
        >
          <!-- Pain Point Card -->
          <div class="bg-white rounded-xl p-4 sm:p-5 md:p-6 shadow-sm hover:shadow-md transition-all duration-300 border border-gray-200 h-full">
            
            <!-- Icon -->
            <div class="mb-3 sm:mb-4">
              <div class="w-10 h-10 sm:w-12 sm:h-12 bg-red-50 rounded-lg sm:rounded-xl flex items-center justify-center group-hover:bg-red-100 transition-colors duration-300">
                {pain.icon === 'clock' && (
                  <svg class="w-5 h-5 sm:w-6 sm:h-6 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <title>Time Waste Icon</title>
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
                  </svg>
                )}
                
                {pain.icon === 'euro' && (
                  <svg class="w-5 h-5 sm:w-6 sm:h-6 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <title>Financial Cost Icon</title>
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"/>
                  </svg>
                )}
                
                {pain.icon === 'error' && (
                  <svg class="w-5 h-5 sm:w-6 sm:h-6 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <title>Error Rate Icon</title>
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.5 0L4.268 16.5c-.77.833.192 2.5 1.732 2.5z"/>
                  </svg>
                )}
              </div>
            </div>

            <!-- Content -->
            <div class="mb-3 sm:mb-4 flex-1">
              <div class="text-2xl sm:text-3xl font-bold text-red-500 mb-2 counter-animation" data-target={pain.statistic}>
                {pain.statistic}
              </div>
              <h3 class="text-base sm:text-lg font-bold text-gray-900 mb-2">
                {pain.label}
              </h3>
              <p class="text-sm sm:text-base text-gray-600 leading-relaxed">
                {pain.description}
              </p>
            </div>
          </div>
        </div>
      ))}
    </div>

    <!-- Call to Action -->
    <div class="text-center mt-10 sm:mt-12 md:mt-16 animate-slide-up px-4" style="animation-delay: 600ms">
      <div class="bg-white rounded-xl p-6 sm:p-8 shadow-sm border border-gray-200 max-w-4xl mx-auto">
        <h3 class="text-xl sm:text-2xl font-bold text-gray-900 mb-3 sm:mb-4">
          Schluss mit ineffizienten Prozessen!
        </h3>
        <p class="text-sm sm:text-base text-gray-600 mb-4 sm:mb-6 leading-relaxed">
          Lassen Sie uns gemeinsam analysieren, wo in Ihrem Unternehmen das größte Automatisierungspotential liegt. 
          In einem kostenlosen 30-minütigen Strategiegespräch identifizieren wir Ihre wichtigsten Optimierungsmöglichkeiten.
        </p>
        <a 
          href="#final-cta"
          class="inline-flex items-center gap-2 bg-gradient-to-br from-orange-500 to-orange-700 text-white px-4 sm:px-6 py-2 sm:py-3 rounded-full hover:from-orange-600 hover:to-orange-800 transition-all duration-200 font-medium text-sm sm:text-base focus:outline-none focus:ring-4 focus:ring-orange-200 shadow-lg cta-button"
          aria-label="Kostenlose Analyse anfragen - Zum Kontaktformular springen"
        >
          Kostenlose Analyse anfragen
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <title>Arrow Right Icon</title>
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"/>
          </svg>
        </a>
      </div>
    </div>
  </div>
</section>

<style>
  @keyframes countUp {
    from {
      opacity: 0;
      transform: scale(0.5);
    }
    to {
      opacity: 1;
      transform: scale(1);
    }
  }

  .counter-animation {
    animation: countUp 0.8s ease-out forwards;
  }

  /* Intersection Observer will trigger these */
  .counter-animate {
    animation: countUp 1.2s ease-out forwards;
  }
</style>

<script>
  // Counter animation when element comes into view
  document.addEventListener('DOMContentLoaded', function() {
    const counters = document.querySelectorAll('.counter-animation');
    
    const observerOptions = {
      threshold: 0.5,
      rootMargin: '0px 0px -10% 0px'
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('counter-animate');
          observer.unobserve(entry.target);
        }
      });
    }, observerOptions);

    counters.forEach(counter => {
      observer.observe(counter);
    });
  });
</script>